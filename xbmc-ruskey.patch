diff --git a/language/English/strings.po b/language/English/strings.po
index 1599f6b..ec09157 100644
--- a/language/English/strings.po
+++ b/language/English/strings.po
@@ -8502,11 +8502,11 @@ msgstr ""
 
 msgctxt "#20180"
 msgid "Symbols"
-msgstr ""
+msgstr "%#"
 
 msgctxt "#20181"
 msgid "Backspace"
-msgstr ""
+msgstr "Del"
 
 msgctxt "#20182"
 msgid "Space"
@@ -11081,6 +11081,14 @@ msgstr ""
 #empty strings from id 34124 to 34200
 #34124-34200 reserved for future use
 
+msgctxt "#909001"
+msgid "Rus"
+msgstr ""
+
+msgctxt "#909002"
+msgid "IP"
+msgstr ""
+
 msgctxt "#34201"
 msgid "Can't find a next item to play"
 msgstr ""
diff --git a/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp b/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp
index 4f16124..1d701ee 100644
--- a/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp
+++ b/xbmc/dialogs/GUIDialogKeyboardGeneric.cpp
@@ -44,6 +44,8 @@ static char symbol_map[37] = ")!@#$%^&*([]{}-_=+;:\'\",.<>/?\\|`~    ";
 #define CTL_BUTTON_LEFT       305
 #define CTL_BUTTON_RIGHT      306
 #define CTL_BUTTON_IP_ADDRESS 307
+#define CTL_BUTTON_RUS_LAYOUT 909001
+
 
 #define CTL_LABEL_EDIT        310
 #define CTL_LABEL_HEADING     311
@@ -65,6 +67,7 @@ CGUIDialogKeyboardGeneric::CGUIDialogKeyboardGeneric()
   m_bShift = false;
   m_hiddenInput = false;
   m_keyType = LOWER;
+	m_keyLayout = ENG;
   m_strHeading = "";
   m_lastRemoteClickTime = 0;
   m_loadType = KEEP_IN_MEMORY;
@@ -225,6 +228,11 @@ bool CGUIDialogKeyboardGeneric::OnMessage(CGUIMessage& message)
       case CTL_BUTTON_SHIFT:
         OnShift();
         break;
+			case CTL_BUTTON_RUS_LAYOUT:
+				if(m_keyLayout == ENG) m_keyLayout = RUS;
+				else m_keyLayout = ENG;
+				UpdateButtons();
+				break;
       case CTL_BUTTON_CAPS:
         if (m_keyType == LOWER)
           m_keyType = CAPS;
@@ -395,7 +403,7 @@ void CGUIDialogKeyboardGeneric::OnRemoteNumberClick(int key)
   Character(ch);
 }
 
-char CGUIDialogKeyboardGeneric::GetCharacter(int iButton)
+WCHAR CGUIDialogKeyboardGeneric::GetCharacter(int iButton)
 {
   // First the numbers
   if (iButton >= 48 && iButton <= 57)
@@ -410,24 +418,49 @@ char CGUIDialogKeyboardGeneric::GetCharacter(int iButton)
   }
   else if (iButton == 32) // space
     return (char)iButton;
-  else if (iButton >= 65 && iButton < 91)
+  else if ((iButton >= 65 && iButton < 91) || (iButton <= 909007 && iButton >=909002 && m_keyLayout == RUS))		//todo
   {
-    if (m_keyType == SYMBOLS)
-    { // symbol
-      OnSymbols();
-      return symbol_map[iButton - 65 + 10];
-    }
-    if ((m_keyType == CAPS && m_bShift) || (m_keyType == LOWER && !m_bShift))
-    { // make lower case
-      iButton += 32;
-    }
-    if (m_bShift)
-    { // turn off the shift key
-      OnShift();
-    }
-    return (char) iButton;
-  }
-  else
+		if(m_keyLayout == ENG)
+		{
+		  if (m_keyType == SYMBOLS)
+		  { // symbol
+		    OnSymbols();
+		    return symbol_map[iButton - 65 + 10];
+		  }
+		  if ((m_keyType == CAPS && m_bShift) || (m_keyType == LOWER && !m_bShift))
+		  { // make lower case
+		    iButton += 32;
+		  }
+		  if (m_bShift)
+		  { // turn off the shift key
+		    OnShift();
+		  }
+			//return 'А'; 
+		  return (char) iButton;
+		}
+		else
+		{
+		  if (m_keyType == SYMBOLS)
+		  { // symbol
+		    OnSymbols();
+		    return symbol_map[iButton - 65 + 10];
+		  }
+			int offset = iButton < 91 ? iButton - 65 : iButton - 909002 + 26;
+			bool sh = m_bShift;
+		  if (m_bShift)
+		  { // turn off the shift key
+		    OnShift();
+		  }
+			if ((m_keyType == CAPS && sh) || (m_keyType == LOWER && !sh))	return L'а' + offset;
+			else return L'А' + offset;
+		}
+
+  }
+  else if(iButton <= 909007 && iButton >=909002)
+	{
+			return GetAddButtonById(iButton);
+	}
+	else
   { // check for symbols
     for (unsigned int i = 0; i < NUM_SYMBOLS; i++)
       if (iButton == symbolButtons[i])
@@ -483,6 +516,12 @@ void CGUIDialogKeyboardGeneric::UpdateButtons()
     SetControlLabel(iButton, aLabel);
   }
 
+  for (int iButton = 909002; iButton <= 909007; iButton++)
+  {
+    aLabel[0] = iButton;
+    SetControlLabel(iButton, aLabel);
+  }
+
   // set correct alphabet characters...
 
   for (int iButton = 65; iButton <= 90; iButton++)
@@ -542,9 +581,13 @@ int CGUIDialogKeyboardGeneric::GetCursorPos() const
 void CGUIDialogKeyboardGeneric::OnSymbols()
 {
   if (m_keyType == SYMBOLS)
+	{
     m_keyType = LOWER;
+	}
   else
+	{
     m_keyType = SYMBOLS;
+	}
   UpdateButtons();
 }
 
@@ -592,10 +635,151 @@ void CGUIDialogKeyboardGeneric::ResetShiftAndSymbols()
 
 const char* CGUIDialogKeyboardGeneric::s_charsSeries[10] = { " 0!@#$%^&*()[]{}<>/\\|", ".,1;:\'\"-+_=?`~", "ABC2", "DEF3", "GHI4", "JKL5", "MNO6", "PQRS7", "TUV8", "WXYZ9" };
 
+char CGUIDialogKeyboardGeneric::GetAddButtonById(int id)
+{
+	switch(id)
+			{
+				case 909002:
+					return '/';
+				break;
+				case 909003:
+					return '.';
+				break;
+				case 909004:
+					return ',';
+				break;
+				case 909005:
+					return ':';
+				break;
+				case 909006:
+					return ';';
+				break;
+				case 909007:
+					return '_';
+				break;
+			}
+}
+
+CStdString CGUIDialogKeyboardGeneric::GetRusLabelById(int id, bool capital = false)
+{
+	CStdString tmp;
+		switch(id)
+		{
+			case 65:
+			tmp = capital?"А":"а";
+			break;
+			case 66:
+			tmp = capital?"Б":"б";
+			break;
+			case 67:
+			tmp = capital?"В":"в";
+			break;
+			case 68:
+			tmp = capital?"Г":"г";
+			break;
+			case 69:
+			tmp = capital?"Д":"д";
+			break;
+			case 70:
+			tmp = capital?"Е":"е";
+			break;
+			case 71:
+			tmp = capital?"Ж":"ж";
+			break;
+			case 72:
+			tmp = capital?"З":"з";
+			break;
+			case 73:
+			tmp = capital?"И":"и";
+			break;
+			case 74:
+			tmp = capital?"Й":"й";
+			break;
+			case 75:
+			tmp = capital?"К":"к";
+			break;
+			case 76:
+			tmp = capital?"Л":"л";
+			break;
+			case 77:
+			tmp = capital?"М":"м";
+			break;
+			case 78:
+			tmp = capital?"Н":"н";
+			break;
+			case 79:
+			tmp = capital?"О":"о";
+			break;
+			case 80:
+			tmp = capital?"П":"п";
+			break;
+			case 81:
+			tmp = capital?"Р":"р";
+			break;
+			case 82:
+			tmp = capital?"С":"с";
+			break;
+			case 83:
+			tmp = capital?"Т":"т";
+			break;
+			case 84:
+			tmp = capital?"У":"у";
+			break;
+			case 85:
+			tmp = capital?"Ф":"ф";
+			break;
+			case 86:
+			tmp = capital?"Х":"х";
+			break;
+			case 87:
+			tmp = capital?"Ц":"ц";
+			break;
+			case 88:
+			tmp = capital?"Ч":"ч";
+			break;
+			case 89:
+			tmp = capital?"Ш":"ш";
+			break;
+			case 90:
+			tmp = capital?"Щ":"щ";
+			break;
+			case 909002:
+			tmp = capital?"Ъ":"ъ";
+			break;
+			case 909003:
+			tmp = capital?"Ы":"ы";
+			break;
+			case 909004:
+			tmp = capital?"Ь":"ь";
+			break;
+			case 909005:
+			tmp = capital?"Э":"э";
+			break;
+			case 909006:
+			tmp = capital?"Ю":"ю";
+			break;
+			case 909007:
+			tmp = capital?"Я":"я";
+			break;
+		}
+	return tmp;
+}
+
 void CGUIDialogKeyboardGeneric::SetControlLabel(int id, const CStdString &label)
 { // find all controls with this id, and set all their labels
   CGUIMessage message(GUI_MSG_LABEL_SET, GetID(), id);
-  message.SetLabel(label);
+	CStdString tmp = label;
+  if (m_keyType != SYMBOLS)
+	{
+		bool capital = true;
+		if ((m_keyType == CAPS && m_bShift) || (m_keyType == LOWER && !m_bShift)) capital = false;
+		if(((id >= 65 && id <= 90) || (id >= 909002 && id <= 909007 ))&&(m_keyLayout == RUS))
+		{
+				tmp = GetRusLabelById(id, capital);
+		}
+		if((id >= 909002 && id <= 909007 ) && (m_keyLayout == ENG)) tmp = GetAddButtonById(id);
+	}
+  message.SetLabel(tmp);
   for (unsigned int i = 0; i < m_children.size(); i++)
   {
     if (m_children[i]->GetID() == id || m_children[i]->IsGroup())
diff --git a/xbmc/dialogs/GUIDialogKeyboardGeneric.h b/xbmc/dialogs/GUIDialogKeyboardGeneric.h
index 1f3d826..e066991 100644
--- a/xbmc/dialogs/GUIDialogKeyboardGeneric.h
+++ b/xbmc/dialogs/GUIDialogKeyboardGeneric.h
@@ -26,6 +26,8 @@
 
 enum KEYBOARD {CAPS, LOWER, SYMBOLS };
 
+enum KEYBOARD_LAYOUT {ENG, RUS };
+
 class CGUIDialogKeyboardGeneric : public CGUIDialog, public CGUIKeyboard
 {
   public:
@@ -40,6 +42,8 @@ class CGUIDialogKeyboardGeneric : public CGUIDialog, public CGUIKeyboard
     void SetHeading(const std::string& heading);
     void SetText(const CStdString& aTextString);
     CStdString GetText() const;
+    CStdString GetRusLabelById(int id, bool capital);
+    char GetAddButtonById(int id);
     bool IsConfirmed() { return m_bIsConfirmed; };
     void SetHiddenInput(bool hiddenInput) { m_hiddenInput = hiddenInput; };
     void Character(WCHAR wch);
@@ -61,7 +65,7 @@ class CGUIDialogKeyboardGeneric : public CGUIDialog, public CGUIKeyboard
     void OnClickButton(int iButtonControl);
     void OnRemoteNumberClick(int key);
     void UpdateButtons();
-    char GetCharacter(int iButton);
+    WCHAR GetCharacter(int iButton);
     void UpdateLabel();
     void ResetShiftAndSymbols();
     void Backspace();
@@ -70,6 +74,7 @@ class CGUIDialogKeyboardGeneric : public CGUIDialog, public CGUIKeyboard
     CStdStringW m_strEdit;
     bool m_bIsConfirmed;
     KEYBOARD m_keyType;
+    KEYBOARD_LAYOUT m_keyLayout;
     int m_iMode;
     bool m_bShift;
     bool m_hiddenInput;
